import { CancellationToken, Connection, GenericNotificationHandler, GenericRequestHandler, NotificationHandler, NotificationType, RequestHandler, RequestType, VersionedTextDocumentIdentifier } from "vscode-languageserver/node";
export declare function isThenable<T>(value: any): value is Thenable<T>;
export interface Request<TParam, TReturn> {
    method: RequestType<unknown, unknown, unknown>["method"];
    param: TParam;
    documentVersion: VersionedTextDocumentIdentifier["version"];
    resolve: (value: TReturn | Thenable<TReturn>) => void;
    reject: (error?: any) => void;
    token?: CancellationToken;
}
export declare function isRequest(value: any): value is Request<any, any>;
export interface Notification<TParam> {
    method: NotificationType<unknown>["method"];
    param: TParam;
    documentVersion: VersionedTextDocumentIdentifier["version"];
}
export type Message<TParam, TReturn> = Request<TParam, TReturn> | Notification<TParam>;
export type VersionLens<TParam> = (param: TParam) => VersionedTextDocumentIdentifier["version"];
export type RequestHandlerMap = Map<string, {
    handler: GenericRequestHandler<any, any>;
    versionLens: VersionLens<any>;
}>;
export type NotificationHandlerMap = Map<string, {
    handler: GenericNotificationHandler;
    versionLens: VersionLens<any>;
}>;
export default class BufferedMessageQueue {
    private connection;
    private queue;
    private requestHandlers;
    private notificationHandlers;
    private timer?;
    constructor(connection: Connection);
    onRequest<TParam, TReturn, TError>(type: RequestType<TParam, TReturn, TError>, handler: RequestHandler<TParam, TReturn, TError>, versionLens: VersionLens<TParam>): void;
    onNotification<TParam>(type: NotificationType<TParam>, handler: NotificationHandler<TParam>, versionLens: VersionLens<TParam>): void;
    addNotification<TParam>(type: NotificationType<TParam>, param: TParam, documentVersion: VersionedTextDocumentIdentifier["version"]): void;
    private next;
    private popQueue;
}
